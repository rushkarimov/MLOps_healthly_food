"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞: Frontend —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import pandas as pd

import yaml
import streamlit as st
from src.data.get_data import load_data, get_dataset
from src.plotting.charts import classic_barplot, classic_boxplot, classic_violinplot
from src.train.training import start_training
from src.evaluate.evaluate import evaluate_input, evaluate_from_file

CONFIG_PATH = '../config/params.yml'


def main_page():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
    """
    st.image(
        'https://i.ibb.co/5FM8w5f/Cover-3.png.',
        width=700,
    )

    st.markdown('## Machine learning project:')
    st.markdown('### –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ üçèüíæüì±')
    st.write(
        """
        –ú–Ω–æ–≥–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã –∏ –ª—é–¥–∏, –∑–∞–±–æ—Ç—è—â–∏–µ—Å—è –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ, –∞–∫—Ç–∏–≤–Ω–æ —Å–ª–µ–¥—è—Ç –∑–∞ —Å–≤–æ–∏–º –≤–µ—Å–æ–º.             
        –ö–ª—é—á–µ–≤—ã–º —Ñ–∞–∫—Ç–æ—Ä–æ–º –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è–µ—Ç—Å—è, –Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –∫–∞–ª–æ—Ä–∏–π.         
        –° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–π ML-–º–æ–¥–µ–ª–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏–≤ –≤—Å–µ–≥–æ 5 –ø—É–Ω–∫—Ç–æ–≤!‚úÖ
        """
    )

    # –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ DataFrame
    st.markdown(
        """
        ### –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–µ–π: 
            - Section - —Ä–∞–∑–¥–µ–ª;
            - Category - –∫–∞—Ç–µ–≥–æ—Ä–∏—è; 
            - Type - —Ç–∏–ø;
            - Manufactured - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å;
            - Price - —Ü–µ–Ω–∞;
            - Energy_value - –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å(target).
        """
    )


def exploratory():
    """
    Exploratory data analysis
    """
    st.markdown('# Exploratory data analysisÔ∏è')

    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)

    # –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —á—Ç–µ–Ω–∏–µ train DataFrame
    data = get_dataset(dataset_path=config['preprocessing']['train_path'])
    st.write(data.head())

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é checkbox
    All_Section_Energy_value = st.sidebar.checkbox('–í –∫–∞–∫–æ–º —Ä–∞–∑–¥–µ–ª–µ –±–æ–ª—å—à–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å?')
    Chocolate_Manufactured_Energy_value = st.sidebar.checkbox('–î–µ—à–µ–≤—ã–π —à–æ–∫–æ–ª–∞–¥ –æ—Ç –ì–ª–æ–±—É—Å–∞ –∏–ª–∏ Alpen Gold?')
    Bar_Manufactured_Energy_value = st.sidebar.checkbox('–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –±–∞—Ç–æ–Ω—á–∏–∫ Bombbar –∏–ª–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Mars?')
    Price_Energy_value = st.sidebar.checkbox('–ô–æ–≥—É—Ä—Ç, –º–æ—Ä–æ–∂–µ–Ω–æ–µ –∏–ª–∏ –ø–µ—á–µ–Ω—å–µ?')
    Brand_Manufactured_Energy_value = st.sidebar.checkbox('–ó–Ω–∞—è –±—Ä–µ–Ω–¥, –º–æ–∂–Ω–æ –ª–∏ —É–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å?')
    Child_Type_Energy_value = st.sidebar.checkbox('–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –¥–µ—Ç–µ–π –±–æ–ª–µ–µ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ, —á–µ–º –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö?')
    Diabet_Section_Energy_value = st.sidebar.checkbox('–í —Å–ª–∞–¥–æ—Å—Ç—è—Ö –¥–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤ –º–µ–Ω—å—à–µ —Å–∞—Ö–∞—Ä–∞?')


    if All_Section_Energy_value:
        st.markdown(
            """
            ##### 1 –≥–∏–ø–æ—Ç–µ–∑–∞:
            ##### –í —Ä–∞–∑–¥–µ–ª–∞—Ö  –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è –∏ —Å–ª–∞–¥–æ—Å—Ç–∏ –±–æ–ª—å—à–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å, 
            ##### –∞ –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –∑–µ–ª–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è?
            """
        )

        st.pyplot(
            classic_barplot(
                data, 'Energy_value', 'Section', 'Section - Energy_value'
            )
        )

        st.pyplot(
            classic_boxplot(
                data, 'Energy_value', 'Section', 'Section - Energy_value'
            )
        )

        st.markdown(
            """
            –í —Ä–∞–∑–¥–µ–ª–∞—Ö —Å–ª–∞–¥–æ—Å—Ç–∏, –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è, –∞ —Ç–∞–∫–∂–µ –±–∞–∫–∞–ª–µ—è –±–æ–ª—å—à–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å, –≤ —Å—Ä–µ–¥–Ω–µ–º 
            –±–æ–ª—å—à–µ 300 –∫–∞–ª–æ—Ä–∏–π.                                                                                                         
            –ê –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –∑–µ–ª–µ–Ω—å –º–µ–Ω—å—à–µ 50 –∫–∞–ª–æ—Ä–∏–π.
            """
        )


    if Chocolate_Manufactured_Energy_value:
        st.markdown(
            """
            ##### 2 –≥–∏–ø–æ—Ç–µ–∑–∞:
            ##### –ü—Ä–æ–¥—É–∫—Ç—ã –¥–µ—à–µ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —à–æ–∫–æ–ª–∞–¥, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–¥ 
            ##### –±—Ä–µ–Ω–¥–æ–º —Å–∞–º–æ–≥–æ –≥–∏–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∞(–ê—à–∞–Ω–∞, –ì–ª–æ–±—É—Å–∞ –∏ —Ç.–¥.), –±–æ–ª–µ–µ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–π,
            ##### —á–µ–º —à–æ–∫–æ–ª–∞–¥ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏ –±—Ä–µ–Ω–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, Alpen Gold?
            """
        )

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–æ–∫–æ–ª–∞–¥
        df_chocolate = data[(data['Section'] == '–•–ª–µ–±, –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è')
                          & (data['Category'] == '–®–æ–∫–æ–ª–∞–¥, –∫–æ–Ω—Ñ–µ—Ç—ã, –∂–µ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∑–∏–Ω–∫–∞')
                          & (data['Type'] == '–®–æ–∫–æ–ª–∞–¥ –∏ —à–æ–∫–æ–ª–∞–¥–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è')]

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥–∞–º
        df_chocolate_two_brand = df_chocolate[
            (df_chocolate['Manufactured'] == '–û–û–û "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è —Ñ–∞–±—Ä–∏–∫–∞ "–í–æ–ª—à–µ–±–Ω–∏—Ü–∞"')
            | (df_chocolate['Manufactured'] == '''–û–û–û "–ú–æ–Ω'–¥—ç–ª–∏—Å –†—É—Å—å"''')]

        rename_chocolate = {
            '''–û–û–û "–ú–æ–Ω'–¥—ç–ª–∏—Å –†—É—Å—å"''': 'Alpen Gold',
            '''–û–û–û "–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è —Ñ–∞–±—Ä–∏–∫–∞ "–í–æ–ª—à–µ–±–Ω–∏—Ü–∞"''': 'Globus'
        }

        df_chocolate_two_brand['Manufactured'] = df_chocolate_two_brand[
            'Manufactured'].replace(rename_chocolate)

        st.pyplot(
            classic_boxplot(
                df_chocolate_two_brand, 'Manufactured', 'Energy_value',
                'Manufactured - Energy_value', 'dark:salmon_r'
            )
        )

        st.markdown(
            """
            –î–∞, —É Alpen Gold –≤ —Å—Ä–µ–¥–Ω–µ–º 510 –∫–∞–ª–æ—Ä–∏–π, –∞ —É –ì–ª–æ–±—É—Å–∞ 550 –∫–∞–ª–æ—Ä–∏–π.
            """
        )


    if Bar_Manufactured_Energy_value:
        st.markdown(
            """
            ##### 3 –≥–∏–ø–æ—Ç–µ–∑–∞:
            ##### –ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–µ –±–∞—Ç–æ–Ω—á–∏–Ω–∏–∫–∏  
            ##### Bombbar –∏–ª–∏ Ironman –º–µ–Ω–µ–µ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ, —á–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –±–∞—Ç–æ–Ω—á–∏–∫–∏ 
            ##### Kit-Kat, Nuts (Nestle) –∏–ª–∏ Snickers, Twix (Mars)?
            """
        )

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –±–∞—Ç–æ–Ω—á–∏–∫–∏
        df_protein_bar = data[(data['Section'] == '–ë–∞–∫–∞–ª–µ—è')
                            & (data['Category'] == '–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã') &
                            (data['Type'] == '–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ')]

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥–∞–º —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –±–∞—Ç–æ–Ω—á–∏–∫–∏
        df_protein_bar_two_brand = df_protein_bar[
            (df_protein_bar['Manufactured'] ==
             '–û–û–û "–ê–†–¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"') |
            (df_protein_bar['Manufactured'] == '''–û–û–û "–§–∏—Ç–Ω–µ—Å –§—É–¥"''')]

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –±–∞—Ç–æ–Ω—á–∏–∫–∏
        df_chocolate_bar = data[(data['Section'] == '–•–ª–µ–±, –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è') & (
                data['Category'] == '–®–æ–∫–æ–ª–∞–¥, –∫–æ–Ω—Ñ–µ—Ç—ã, –∂–µ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∑–∏–Ω–∫–∞') &
                              (data['Type'] == '–®–æ–∫–æ–ª–∞–¥ –∏ —à–æ–∫–æ–ª–∞–¥–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è')]

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥–∞–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –±–∞—Ç–æ–Ω—á–∏–∫–∏
        df_chocolate_bar_two_brand = df_chocolate_bar[
            (df_chocolate_bar['Manufactured'] == '–û–û–û "–ú–∞—Ä—Å"') |
            (df_chocolate_bar['Manufactured'] == '''–û–û–û "–ù–µ—Å—Ç–ª–µ –†–æ—Å—Å–∏—è"''')]

        # —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω—ã–π DataFrame
        df_bar = pd.concat([
            df_protein_bar_two_brand[['Manufactured', 'Energy_value']],
            df_chocolate_bar_two_brand[['Manufactured', 'Energy_value']]
        ])

        rename_bar = {
            '''–û–û–û "–ê–†–¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"''': 'Ironman',
            '''–û–û–û "–§–∏—Ç–Ω–µ—Å –§—É–¥"''': 'Bombbar',
            '''–û–û–û "–ú–∞—Ä—Å"''': 'Mars',
            '''–û–û–û "–ù–µ—Å—Ç–ª–µ –†–æ—Å—Å–∏—è"''': 'Nestle'
        }

        df_bar['Manufactured'] = df_bar['Manufactured'].replace(rename_bar)

        st.pyplot(
            classic_boxplot(
                df_bar, 'Energy_value', 'Manufactured',
                'Manufactured - Energy_value', 'dark:salmon_r'
            )
        )

        st.markdown(
            """
            –î–∞, –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç–æ–Ω—á–∏–∫–∞—Ö –≤ —Å—Ä–µ–¥–Ω–µ–º –¥–æ 300 –∫–∞–ª–æ—Ä–∏–π, –∞ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –æ–∫–æ–ª–æ 500.
            """
        )


    if Price_Energy_value:
        st.markdown(
            """
            ##### 4 –≥–∏–ø–æ—Ç–µ–∑–∞:
            ##### –î–æ—Ä–æ–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ—é—Ç –±–æ–ª—å—à—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å, —á–µ–º –¥–µ—à–µ–≤—ã–µ, 
            ##### –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: –π–æ–≥—É—Ä—Ç—ã, –º–æ—Ä–æ–∂–µ–Ω–æ–µ –∏ –ø–µ—á–µ–Ω—å–µ?
            """
        )

        st.markdown(
            """
            ###### –ô–æ–≥—É—Ä—Ç—ã:
            """
        )

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –π–æ–≥—É—Ä—Ç–æ–≤
        df_yogurt = data[(data['Section'] == '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —Å—ã—Ä, —è–π—Ü–∞')
                        & (data['Category'] == '–ô–æ–≥—É—Ä—Ç') &
                        (data['Type'] == '–ô–æ–≥—É—Ä—Ç—ã —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ')]

        st.pyplot(
            classic_barplot(
                df_yogurt, 'Price', 'Energy_value',
                'Yogurt(Price - Energy_value)', 'Blues', 90
            )
        )

        st.pyplot(
            classic_boxplot(
                df_yogurt, 'Price', 'Energy_value',
                'Yogurt(Price - Energy_value)', 'Blues', 90
            )
        )

        st.markdown(
            """
            ###### –ú–æ—Ä–æ–∂–µ–Ω–æ–µ:
            """
        )

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ—Ä–æ–∂–µ–Ω–æ–µ
        df_ice_cream = data[(data['Section'] == '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã')
                          & (data['Category'] == '–ú–æ—Ä–æ–∂–µ–Ω–æ–µ, –¥–µ—Å–µ—Ä—Ç—ã')]

        st.pyplot(
            classic_barplot(
                df_ice_cream, 'Price', 'Energy_value',
                'Ice cream(Price - Energy_value)', 'light:b',
                90, 11, 11
            )
        )

        st.pyplot(
            classic_boxplot(
                df_ice_cream, 'Price', 'Energy_value',
                'Ice cream(Price - Energy_value)', 'light:b',
                90, 11, 11
            )
        )

        st.markdown(
            """
            ###### –ü–µ—á–µ–Ω—å—è:
            """
        )

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—á–µ–Ω—å—è
        df_cookies = data[(data['Section'] == '–•–ª–µ–±, –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è')
                        & (data['Category'] == '–ü–µ—á–µ–Ω—å–µ, –ø—Ä—è–Ω–∏–∫–∏, –≤–∞—Ñ–ª–∏') &
                        (data['Type'] == '–ü–µ—á–µ–Ω—å–µ, –≥–∞–ª–µ—Ç—ã, –∫—Ä–µ–∫–µ—Ä—ã')]

        st.pyplot(
            classic_barplot(
                df_cookies, 'Price', 'Energy_value',
                '–°ookies(Price - Energy_value)', 'YlOrBr',
                90, 8, 8
            )
        )

        st.pyplot(
            classic_boxplot(
                df_cookies, 'Price', 'Energy_value',
                '–°ookies(Price - Energy_value)', 'YlOrBr',
                90, 8, 8
            )
        )

        st.markdown(
            """
            –í –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –Ω–æ —ç—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ—Ç —Ç–æ—Ç —Ñ–∞–∫—Ç, —á—Ç–æ –æ–Ω–∞ –º–æ–∂–µ—Ç 
            –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.
            """
        )


    if Brand_Manufactured_Energy_value:
        st.markdown(
            """
            ##### 5 –≥–∏–ø–æ—Ç–µ–∑–∞:
            ##### –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö 
            ##### –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏ –∑–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è, –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å, 
            ##### –∫–∞–∫–∞—è –≤ —Å—Ä–µ–¥–Ω–µ–º –±—É–¥–µ—Ç –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤?
            """
        )

        st.markdown(
            """
            ###### –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏:
            """
        )

        # –≤—ã–≤–æ–¥ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
        df_Manufactured = data.Manufactured.value_counts(
            normalize=True)[:10].to_frame().rename(columns={
            'proportion': 'Percent'
        }).reset_index()

        st.pyplot(
            classic_barplot(
                df_Manufactured, 'Percent', 'Manufactured',
                'Manufactured - Percent', 'icefire'
            )
        )

        st.markdown(
            """
            ###### –í–∑–∞–∏–º–æ—Å–≤—è–∑—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏:
            """
        )

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–ø 5-—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º
        df_Globus = data[(data['Manufactured'] == '–û–û–û "–ì–∏–ø–µ—Ä–≥–ª–æ–±—É—Å"') |
                       (data['Manufactured'] == '–û–û–û "–ú–∞—Ä—Å"') |
                       (data['Manufactured'] == '–ê–û "–î–∞–Ω–æ–Ω –†–æ—Å—Å–∏—è"') |
                       (data['Manufactured'] == '–ê–û "–ü—Ä–æ–≥—Ä–µ—Å—Å"') |
                       (data['Manufactured'] == '–û–û–û "–ù–µ—Å—Ç–ª–µ –†–æ—Å—Å–∏—è"')]

        st.pyplot(
            classic_boxplot(
                df_Globus, 'Manufactured', 'Energy_value',
                'Manufactured - Energy_value', 'icefire'
            )
        )

        st.markdown(
            """
            –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ì–ª–æ–±—É—Å", "–ú–∞—Ä—Å" –∏ "–ù–µ—Å—Ç–ª–µ" 
            –≤—ã–ø—É—Å–∫–∞—é—Ç –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö, –ø–æ—ç—Ç–æ–º—É –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è, –ø—Ä–∏ —ç—Ç–æ–º "–î–∞–Ω–Ω–æ–Ω"
            —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –π–æ–≥—É—Ä—Ç–∞—Ö, –ø–æ—ç—Ç–æ–º—É —É –Ω–∏—Ö –≤ —Å—Ä–µ–¥–Ω–µ–º –æ–∫–æ–ª–æ 100 –∫–∞–ª–æ—Ä–∏–π, "–ü—Ä–æ–≥—Ä–µ—Å—Å" –Ω–∞ –¥–µ—Ç—Å–∫–æ–º
            –ø–∏—Ç–∞–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É –æ–∫–æ–ª–æ 80 –∫–∞–ª–æ—Ä–∏–π.
            """
        )


    if Child_Type_Energy_value:
        st.markdown(
            """
            ##### 6 –≥–∏–ø–æ—Ç–µ–∑–∞:
            ##### –ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –¥–µ—Ç–µ–π –±–æ–ª–µ–µ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ, —á–µ–º –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö?
            """
        )

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–µ—Ç—Å–∫–∏–µ –∫–∞—à–∏
        df_porridge_children = data[(data['Section'] == '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã')
                                  & (data['Category'] == '–î–µ—Ç—Å–∫–æ–µ –ø–∏—Ç–∞–Ω–∏–µ') &
                                  (data['Type'] == '–î–µ—Ç—Å–∫–∏–µ –∫–∞—à–∏')]

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∑—Ä–æ—Å–ª—ã–µ –∫–∞—à–∏
        df_porridge_adults = data[(data['Section'] == '–ë–∞–∫–∞–ª–µ—è')
                                & (data['Category'] == '–ü—Ä–æ–¥—É–∫—Ç—ã –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è')
                                & (data['Type'] == '–•–ª–æ–ø—å—è –∏ –∫–∞—à–∏')]

        # —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω—ã–π DataFrame
        df_porridge = pd.concat([
            df_porridge_children[['Type', 'Energy_value']],
            df_porridge_adults[['Type', 'Energy_value']]
        ])

        rename_porridge = {'–•–ª–æ–ø—å—è –∏ –∫–∞—à–∏': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∫–∞—à–∏'}

        df_porridge['Type'] = df_porridge['Type'].replace(rename_porridge)

        st.pyplot(
            classic_violinplot(
                df_porridge, 'Energy_value', 'Type', 'Type - Energy_value',
                'cubehelix'
            )
        )

        st.markdown(
            """
            –î–∞, –Ω–µ–±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–∞ 20-30 –∫–∞–ª–æ—Ä–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
            """
        )


    if Diabet_Section_Energy_value:
        st.markdown(
            """
            ##### 7 –≥–∏–ø–æ—Ç–µ–∑–∞:
            ##### –í —Å–ª–∞–¥–æ—Å—Ç—è—Ö –¥–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∞—Ö–æ—Ä–æ–∑–∞–º–µ–Ω–∏—Ç–µ–ª–∏, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∏ 
            ##### –º–µ–Ω–µ–µ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ, —á–µ–º –æ–±—ã—á–Ω—ã–µ —Å–ª–∞–¥–æ—Å—Ç–∏?
            """
        )

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤
        df_sweets_diabetics = data[(data['Section'] == '–ë–∞–∫–∞–ª–µ—è')
                                 & (data['Category'] == '–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã') &
                                 (data['Type'] == '–ó–∞–º–µ–Ω–∏—Ç–µ–ª–∏ —Å–∞—Ö–∞—Ä–∞ –∏ –¥–∏–∞–±–µ—Ç–∏–∫–∞')]

        rename_diabetics = {'–ë–∞–∫–∞–ª–µ—è': '–î–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ'}

        df_sweets_diabetics['Section'] = df_sweets_diabetics['Section'].replace(
            rename_diabetics)

        # —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è
        df_sweets_classic = data[(data['Section'] == '–•–ª–µ–±, –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è')]

        rename_classic = {'–•–ª–µ–±, –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ'}

        df_sweets_classic['Section'] = df_sweets_classic['Section'].replace(
            rename_classic)

        # —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω—ã–π DataFrame
        df_sweets = pd.concat([
            df_sweets_diabetics[['Section', 'Energy_value']],
            df_sweets_classic[['Section', 'Energy_value']]
        ])

        st.pyplot(
            classic_boxplot(
                df_sweets, 'Section', 'Energy_value', 'Section - Energy_value',
                'viridis'
            )
        )

        st.markdown(
            """
            –î–∞, –µ—Å—Ç—å —Ä–∞–∑–Ω–∏—Ü–∞ –≥–¥–µ-—Ç–æ –Ω–∞ 50 –∫–∞–ª–æ—Ä–∏–π.
            """
        )

def training():
    """
    –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏
    """
    st.markdown('# Training model LightGBM')
    # get params
    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)
    # endpoint
    endpoint = config['endpoints']['train']

    if st.button('Start training'):
        start_training(config=config, endpoint=endpoint)


def prediction():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø—É—Ç–µ–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    st.markdown('# Prediction')
    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)
    endpoint = config['endpoints']['prediction_input']
    unique_data_path = config['preprocessing']['unique_values_path']

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    if os.path.exists(config['train']['model_path']):
        evaluate_input(unique_data_path=unique_data_path, endpoint=endpoint)
    else:
        st.error('–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å')


def prediction_from_file():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    st.markdown('# Prediction')
    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)
    endpoint = config['endpoints']['prediction_from_file']

    upload_file = st.file_uploader(
        '', type=['csv', 'xlsx'], accept_multiple_files=False
    )
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª
    if upload_file:
        dataset_csv_df, files = load_data(data=upload_file, type_data='Test')
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        if os.path.exists(config['train']['model_path']):
            evaluate_from_file(data=dataset_csv_df, endpoint=endpoint, files=files)
        else:
            st.error('–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å')


def main():
    """
    –°–±–æ—Ä–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≤ –æ–¥–Ω–æ–º –±–ª–æ–∫–µ
    """
    page_names_to_funcs = {
        '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞üìÑ': main_page,
        '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Öüìä': exploratory,
        '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ML-–º–æ–¥–µ–ª–∏üèÉ‚Äç‚ôÇÔ∏èÔ∏è': training,
        '–£–∑–Ω–∞–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞üçè': prediction,
        '–£–∑–Ω–∞–π, –∑–∞–≥—Ä—É–∑–∏–≤ —Å–≤–æ–π —Ñ–∞–π–ªüíª': prediction_from_file,
    }
    selected_page = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç', page_names_to_funcs.keys())
    page_names_to_funcs[selected_page]()


if __name__ == '__main__':
    main()
