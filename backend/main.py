"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞: –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.
–í–µ—Ä—Å–∏—è: 1.0
"""

import warnings
import optuna
import pandas as pd

import uvicorn
from fastapi import FastAPI
from fastapi import File
from fastapi import UploadFile
from pydantic import BaseModel

from src.pipelines.pipeline import pipeline_training
from src.evaluate.evaluate import pipeline_evaluate
from src.train.metrics import load_metrics

warnings.filterwarnings('ignore')
optuna.logging.set_verbosity(optuna.logging.WARNING)

app = FastAPI()
CONFIG_PATH = '../config/params.yml'


class InsuranceCustomer(BaseModel):
    """
    –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–∏
    """
    Section: str
    Category: str
    Type: str
    Manufactured: str
    Price: float


@app.get('/hello')
def welcome():
    """
    Hello
    :return: None
    """
    return {'message': '–ü—Ä–∏–≤–µ—Ç —Å–ø–æ—Ä—Ç—Å–º–µ–Ω!ü§ö'}


@app.post('/train')
def training():
    """
    –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    """
    pipeline_training(config_path=CONFIG_PATH)
    metrics = load_metrics(config_path=CONFIG_PATH)

    return {'metrics': metrics}


@app.post('/predict')
def prediction(file: UploadFile = File(...)):
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ —Ñ–∞–π–ª–∞
    """
    result = pipeline_evaluate(config_path=CONFIG_PATH, data_path=file.file)
    assert isinstance(result, list), '–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É list'
    # –∑–∞–≥–ª—É—à–∫–∞ —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –∏–Ω–∞—á–µ –∑–∞–≤–∏—Å–Ω–µ—Ç
    return {'prediction': result[:5]}


@app.post('/predict_input')
def prediction_input(customer: InsuranceCustomer):
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    """
    features = [
        [
            customer.Section,
            customer.Category,
            customer.Type,
            customer.Manufactured,
            customer.Price,
        ]
    ]

    cols = [
        'Section',
        'Category',
        'Type',
        'Manufactured',
        'Price',
    ]

    data = pd.DataFrame(features, columns=cols)
    predictions = pipeline_evaluate(config_path=CONFIG_PATH, dataset=data)[0]
    product = predictions
    return product


if __name__ == '__main__':
    # –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –∑–∞–¥–∞–Ω–Ω—ã–π —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç
    uvicorn.run(app, host="127.0.0.1", port=80)
